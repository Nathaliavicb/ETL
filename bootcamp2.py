# -*- coding: utf-8 -*-
"""Bootcamp2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vdrHk8EGgcjqXJGkQqjjptqwWhpAEfSy

## **EXTRACT**
"""

sdw2023_api_url = 'https://sdw-2023-prd.up.railway.app'

import pandas as pd

df = pd.read_csv('Arquivo.csv')
user_ids = df['UserID'].tolist()
print(user_ids)

import requests
import json

def get_user(id):
  response = requests.get(f'{sdw2023_api_url}/users/{id}')
  return response.json() if response.status_code == 200 else None

users = [user for id in user_ids if (user := get_user(id)) is not None]
print(json.dumps(users, indent=2))

'''Exemplo de Walrus'''

if (vendas := int(input("Vendas do funcionário: "))) > 1000:
    bonus = 0.05 * vendas
else:
    bonus = 0

print("Bonus: ", bonus)
print("Vendas:", vendas)

"""## **TRANSFORMAR**"""

!pip install openai

openai_api_key = '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'

import openai

openai.api_key = openai_api_key
openai

def generate_ai_news(user):
  completion = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
      {
          "role": "system",
          "content": "Voce é um especialista em QA"
      },
      {
          "role": "user",
          "content": f"Crie uma mensagem para {user['name']}, sobre a importancia da Qualidade do software(Maximo de 100 caracteres)"
      }
    ]
  )
  return completion.choices[0].message.content

for user in users:
  news = generate_ai_news(user)
  print(news)

"""##LOAD"""

def update_user(user):
  response = requests.put(f"{sdw2023_api_url}/users/{user['id']}", json=user)
  return True if response.status_code == 200 else False

for user in users:
  success = update_user(user)
  print(f"User{user['name']} updated? {success}")